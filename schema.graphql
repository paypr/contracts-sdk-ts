"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behaviour of this scalar.
  """
  url: String!
) on SCALAR

type Account implements BaseModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  name: String!
  nickname: String!
  hasPaymentInfo: Boolean!
  balance: Float!
  payprBalance: Float!
  apiKeys: ApiKeyConnection!
  contracts(contractType: ContractType): ContractConnection!
  submissions(currentStatus: SubmissionStatus, onlyInProgress: Boolean): SubmissionConnection!
  players: PlayerConnection!
  transactions: TransactionConnection!
}

type AcquireNextSkillLevelForPlayerEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
  consumableAmountsNeeded: [ConsumableAmount!]!
}

type AcquireNextSkillLevelForPlayerResponse implements SubmissionResponse {
  submission: Submission!
}

type ActivityContract implements BaseModel & BaseAccountModel & Contract & BaseContract & ConsumableHolder & ConsumableConsumer & ConsumableProvider & DisableableContract & SkillConstrained {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  contractType: ContractType!
  version: Int!
  needsUpgrade: Boolean!
  address: ContractAddress!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  requiredConsumables: [ConsumableAmountAndBalance!]!
  providedConsumables: [ConsumableAmountAndBalance!]!
  requiredSkills: [SkillLevel!]!
  disabled: Boolean!
}

type ApiKey implements BaseModel & BaseAccountModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  lastUsedAt: ISODateTime
}

"""
Contains a list of items of a particular type
"""
type ApiKeyConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [ApiKeyEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type ApiKeyEdge {
  """
  The item in the list
  """
  node: ApiKey!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

type ArtifactContract implements BaseModel & BaseAccountModel & Contract & BaseContract & ConsumableHolder & ConsumableProvider & DisableableContract {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  contractType: ContractType!
  version: Int!
  needsUpgrade: Boolean!
  address: ContractAddress!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  providedConsumables: [ConsumableAmountAndBalance!]!
  baseUri: String!
  symbol: String!
  initialUses: Int!
  disabled: Boolean!
}

interface BaseAccountModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
}

interface BaseContract {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  contractType: ContractType!
  version: Int!
  needsUpgrade: Boolean!
  address: ContractAddress!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
}

interface BaseModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
}

type ConsumableAmount {
  consumable: ConsumableContract!
  amount: Float!
}

type ConsumableAmountAndBalance {
  consumable: ConsumableContract!
  amount: Float!
  balance: Float!
}

input ConsumableAmountInput {
  consumableContractId: ID!
  amount: Float!
}

interface ConsumableConsumer {
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  requiredConsumables: [ConsumableAmountAndBalance!]!
}

type ConsumableContract implements BaseModel & BaseAccountModel & Contract & BaseContract & DisableableContract {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  contractType: ContractType!
  version: Int!
  needsUpgrade: Boolean!
  address: ContractAddress!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
  symbol: String!
  exchangeRate: Int!
  totalSupply: Float!
  accountBalance: Float!
  playerBalance(playerId: ID!): Float!
  playerBalances(playerIds: [ID!]!): [PlayerAmount!]!
  disabled: Boolean!
}

interface ConsumableHolder {
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
}

interface ConsumableProvider {
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  providedConsumables: [ConsumableAmountAndBalance!]!
}

interface Contract {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  contractType: ContractType!
  version: Int!
  needsUpgrade: Boolean!
  address: ContractAddress!
  discoverable: Boolean!
}

scalar ContractAddress

"""
Contains a list of items of a particular type
"""
type ContractConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [ContractEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type ContractEdge {
  """
  The item in the list
  """
  node: Contract!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

input ContractInfoInput {
  name: String!
  description: String
}

enum ContractType {
  """
  Activity contract
  """
  Activity

  """
  Artifact contract
  """
  Artifact

  """
  Consumable contract
  """
  Consumable

  """
  Skill contract
  """
  Skill

  """
  Skill-constrained Activity contract
  """
  SkillConstrainedActivity
}

type CreateActivityEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
}

input CreateActivityInput {
  info: ContractInfoInput!
  requiredSkills: [SkillLevelInput!]
  requiredConsumables: [ConsumableAmountInput!]!
  providedConsumables: [ConsumableAmountInput!]!
  discoverable: Boolean
}

type CreateActivityResponse implements SubmissionResponse {
  submission: Submission!
}

type CreateApiKeyResponse {
  apiKey: ApiKey!
  secretKey: String!
}

type CreateArtifactEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
}

input CreateArtifactInput {
  info: ContractInfoInput!
  symbol: String
  providedConsumables: [ConsumableAmountInput!]!
  initialUses: Int
  discoverable: Boolean
}

type CreateArtifactResponse implements SubmissionResponse {
  submission: Submission!
}

type CreateConsumableEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
}

input CreateConsumableInput {
  info: ContractInfoInput!
  symbol: String
  exchangeRate: Int!
  discoverable: Boolean
}

type CreateConsumableResponse implements SubmissionResponse {
  submission: Submission!
}

type CreatePlayerEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
}

input CreatePlayerInput {
  name: String!
}

type CreatePlayerResponse implements SubmissionResponse {
  submission: Submission!
}

type CreateSkillEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
}

input CreateSkillInput {
  info: ContractInfoInput!
  requiredSkills: [SkillLevelInput!]
  requiredConsumables: [ConsumableAmountInput!]!
  discoverable: Boolean
}

type CreateSkillResponse implements SubmissionResponse {
  submission: Submission!
}

type DeleteApiKeyResponse {
  status: DeleteApiKeyStatus
}

enum DeleteApiKeyStatus {
  """
  API key successfully deleted
  """
  Success

  """
  API key not found
  """
  InvalidApiKey
}

interface DisableableContract {
  disabled: Boolean!
}

type DisableContractResponse implements SubmissionResponse {
  submission: Submission!
}

type EnableContractResponse implements SubmissionResponse {
  submission: Submission!
}

type Estimates {
  createActivity(input: CreateActivityInput!): CreateActivityEstimate!
  createArtifact(input: CreateArtifactInput!): CreateArtifactEstimate!
  createConsumable(input: CreateConsumableInput!): CreateConsumableEstimate!
  createSkill(input: CreateSkillInput!): CreateSkillEstimate!
  transferConsumableFromSkill(
    skillContractId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableFromSkillEstimate!
  upgradeContract(contractId: ID!): UpgradeContractEstimate!
  purchasePaypr(amount: Float!): PurchasePayprEstimate!
  createPlayer(input: CreatePlayerInput!): CreatePlayerEstimate!
  acquireNextSkillLevelForPlayer(
    playerId: ID!
    skillContractId: ID!
    itemsToUse: [ItemInput!]
  ): AcquireNextSkillLevelForPlayerEstimate!
  transferConsumableFromPlayer(
    playerId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableFromPlayerEstimate!
  transferConsumableToPlayer(
    playerId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableToPlayerEstimate!
  upgradePlayer(playerId: ID!): UpgradePlayerEstimate!
}

interface GasAndPayprEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
  payprAmount: Float!
  payprBalance: Float!
}

interface GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
}

scalar ISODateTime

input ItemInput {
  artifactContractId: ID!
  itemId: String!
}

type Mutation {
  updateAccount(name: String!): UpdateAccountResponse!
  prepareBillingUpdate: PrepareBillingResponse
  updateAccountBilling(input: UpdateAccountBillingInput!): UpdateAccountBillingResponse!
  createApiKey: CreateApiKeyResponse!
  deleteApiKey(apiKeyId: ID!): DeleteApiKeyResponse!
  createActivity(input: CreateActivityInput!): CreateActivityResponse!
  createArtifact(input: CreateArtifactInput!): CreateArtifactResponse!
  createConsumable(input: CreateConsumableInput!): CreateConsumableResponse!
  createSkill(input: CreateSkillInput!): CreateSkillResponse!
  disableContract(id: ID!): DisableContractResponse!
  enableContract(id: ID!): EnableContractResponse!
  publishContract(id: ID!): PublishContractResponse!
  transferConsumableFromSkill(
    skillContractId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableFromSkillResponse!
  upgradeContract(contractId: ID!): UpgradeContractResponse!
  purchasePaypr(amount: Float!): PurchasePayprResponse!
  createPlayer(input: CreatePlayerInput!): CreatePlayerResponse!
  acquireNextSkillLevelForPlayer(
    playerId: ID!
    skillContractId: ID!
    itemsToUse: [ItemInput!]
    amountsToProvide: [ConsumableAmountInput!]!
  ): AcquireNextSkillLevelForPlayerResponse!
  transferConsumableFromPlayer(
    playerId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableFromPlayerResponse!
  transferConsumableToPlayer(
    playerId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableToPlayerResponse!
  upgradePlayer(playerId: ID!): UpgradePlayerResponse!
}

"""
Describes the current state of pagination
"""
type PageInfo {
  """
  The cursor used to retrieve this page, if any
  """
  startCursor: String

  """
  The cursor to use to get the next page, if any
  """
  endCursor: String

  """
  Whether or not there are any more pages after this one
  """
  hasNextPage: Boolean!

  """
  Whether or not there are any more pages before this one
  """
  hasPreviousPage: Boolean!
}

type Player {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  name: String!
  address: ContractAddress!
  version: Int!
  needsUpgrade: Boolean!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  skillLevel(skillContractId: ID!): Int!
  skillLevels(skillContractIds: [ID!]!): [SkillLevel!]!
}

type PlayerAmount {
  player: Player!
  amount: Float!
}

"""
Contains a list of items of a particular type
"""
type PlayerConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [PlayerEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type PlayerEdge {
  """
  The item in the list
  """
  node: Player!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

type PrepareBillingResponse {
  clientSecret: StripeClientSecret!
}

type PublishContractResponse {
  contract: Contract!
}

type PurchasePayprEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
  payprCost: Float!
  totalCost: Float!
}

type PurchasePayprResponse implements SubmissionResponse {
  submission: Submission!
}

type Query {
  account: Account!
  contracts(contractType: ContractType, onlyEnabled: Boolean, showOthers: Boolean): ContractConnection!
  contract(id: ID!): Contract
  submission(id: ID!): Submission
  player(id: ID!): Player
  transaction(id: ID!): Transaction
  estimates: Estimates!
}

interface SkillConstrained {
  requiredSkills: [SkillLevel!]!
}

type SkillContract implements BaseModel & BaseAccountModel & Contract & BaseContract & ConsumableHolder & ConsumableConsumer & DisableableContract & SkillConstrained {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  contractType: ContractType!
  version: Int!
  needsUpgrade: Boolean!
  address: ContractAddress!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  requiredConsumables: [ConsumableAmountAndBalance!]!
  requiredSkills: [SkillLevel!]!
  disabled: Boolean!
}

type SkillLevel {
  skill: SkillContract!
  level: Int!
}

input SkillLevelInput {
  skillContractId: ID!
  level: Int!
}

scalar StripeClientSecret

scalar StripePaymentMethod

type Submission implements BaseModel & BaseAccountModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  submissionType: String!
  currentStatus: SubmissionStatus!
  errorDetails: String
  estimateInSeconds: Int
  inProgress: Boolean!
  done: Boolean!
  contract: Contract
  player: Player
  transactionHash: String
}

"""
Contains a list of items of a particular type
"""
type SubmissionConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [SubmissionEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type SubmissionEdge {
  """
  The item in the list
  """
  node: Submission!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

interface SubmissionResponse {
  submission: Submission!
}

enum SubmissionStatus {
  """
  Submission has been created
  """
  Created

  """
  Submission has been submitted
  """
  Submitted

  """
  Submission is being worked on
  """
  Processing

  """
  Submission has been completed
  """
  Completed

  """
  Submission failed. See errorDetails for details.
  """
  Failed
}

type Transaction implements BaseModel & BaseAccountModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  transactionType: TransactionType!
  amount: Float!
  accountBalance: Float!
  gasAmount: Float
  submission: Submission
  contract: Contract
}

"""
Contains a list of items of a particular type
"""
type TransactionConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [TransactionEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type TransactionEdge {
  """
  The item in the list
  """
  node: Transaction!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

enum TransactionType {
  """
  Prepayment balance increase
  """
  Prepayment

  """
  Represents a purchase
  """
  Purchase

  """
  Create a new contract
  """
  CreateContract

  """
  Execute a contract
  """
  ExecuteContract

  """
  Update a contract
  """
  UpdateContract
}

type TransferConsumableFromPlayerEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
  playerConsumableBalance: Float!
}

type TransferConsumableFromPlayerResponse implements SubmissionResponse {
  submission: Submission!
}

type TransferConsumableFromSkillEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
  skillConsumableBalance: Float!
}

type TransferConsumableFromSkillResponse implements SubmissionResponse {
  submission: Submission!
}

type TransferConsumableToPlayerEstimate implements GasEstimate & GasAndPayprEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
  payprAmount: Float!
  payprBalance: Float!
}

type TransferConsumableToPlayerResponse implements SubmissionResponse {
  submission: Submission!
}

input UpdateAccountBillingInput {
  stripePaymentMethod: StripePaymentMethod!
}

type UpdateAccountBillingResponse {
  account: Account!
}

type UpdateAccountResponse {
  account: Account!
}

type UpgradeContractEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
}

type UpgradeContractResponse implements SubmissionResponse {
  submission: Submission!
}

type UpgradePlayerEstimate implements GasEstimate {
  gasAmount: Int!
  gasCost: Float!
  balance: Float!
  prepayCharge: Float
}

type UpgradePlayerResponse implements SubmissionResponse {
  submission: Submission!
}
