"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Account implements BaseModel {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!
  name: String!
  nickname: String!
  hasPaymentInfo: Boolean!
  address: String
  balance: Float!
  payprBalance: Float!

  """The balance of the given consumable for the account"""
  consumableBalance(consumableContractId: ID!): Float!

  """The balances of each of the given consumables for the account"""
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!

  """The owned items for the account"""
  ownedItems(artifactContractId: ID!): [Item!]!

  """The number of owned items for the account"""
  ownedItemCounts(artifactContractIds: [ID!]!): [ArtifactAmount!]!
  apiKeys: ApiKeyConnection!
  contracts(contractType: ContractType, contractTypes: [ContractType!]): ContractConnection!
  submissions(currentStatus: SubmissionStatus, onlyInProgress: Boolean): SubmissionConnection!
  players: PlayerConnection!
  transactions: TransactionConnection!

  """The block explorer URL for the contract"""
  blockExplorerUrl: String
}

type AcquireNextSkillLevelForPlayerEstimate implements GasEstimateCore & GasEstimate & GasAndTransactionEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!

  """
  Consumables that must be provided by the player to acquire the skill, along with the player's balance for each
  """
  consumableAmountsNeeded: [ConsumableAmountAndBalance!]!
}

type ActivityContract implements BaseModel & BaseAccountModel & ContractLike & Contract & ConsumableConsumer & ConsumableProvider & DisableableContract & SkillConstrained {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!

  """The address of the Ethereum contract"""
  address: ContractAddress!

  """The version of the Ethereum contract"""
  version: Int!

  """
  Whether or not the Ethereum contract needs to be upgraded to get to the latest version
  """
  needsUpgrade: Boolean!

  """
  Whether or not the account contract is a role delegate for this Ethereum contract
  """
  isAccountContractRoleDelegate: Boolean!

  """The balance of Paypr for this Ethereum contract"""
  payprBalance: Float!

  """The balance of the given consumable for this Ethereum contract"""
  consumableBalance(consumableContractId: ID!): Float!

  """
  The balances of each of the given consumables for this Ethereum contract
  """
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!

  """The owned items for this Ethereum contract"""
  ownedItems(artifactContractId: ID!): [Item!]!

  """The number of owned items for this Ethereum contract"""
  ownedItemCounts(artifactContractIds: [ID!]!): [ArtifactAmount!]!

  """The block explorer URL for the contract"""
  blockExplorerUrl: String

  """The type of the contract"""
  contractType: ContractType!

  """Whether or not the contract is discoverable"""
  discoverable: Boolean!

  """The name of the contract"""
  name: String!

  """The description of the contract"""
  description: String!

  """The uri of the contract that can be used for additional information"""
  uri: String!

  """The account name of the contract"""
  account: String!

  """The consumables that are required by this consumable consumer"""
  requiredConsumables: [ConsumableAmountAndBalance!]!

  """The consumables that are provided by this consumable provider"""
  providedConsumables: [ConsumableAmountAndBalance!]!
  requiredSkills: [SkillLevel!]!

  """
  Whether or not the Ethereum contract is disabled. When disabled, the contract will not allow transactions
  """
  disabled: Boolean!
}

type ApiKey implements BaseModel & BaseAccountModel {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!
  lastUsedAt: ISODateTime
}

"""Contains a list of items of a particular type"""
type ApiKeyConnection {
  """The page information"""
  pageInfo: PageInfo!

  """The list of edges"""
  edges: [ApiKeyEdge!]!

  """The total number of items"""
  total: Int!
}

"""A single edge of a connection, containing the item and its cursor"""
type ApiKeyEdge {
  """The item in the list"""
  node: ApiKey!

  """The cursor at this item, for use in pagination"""
  cursor: String!
}

"""Represents an artifact and an associated amount"""
type ArtifactAmount {
  """The artifact contract"""
  artifact: ArtifactContract!

  """The number of items associated with the artifact"""
  amount: Int!
}

"""
Contract (ERC721) that represents items that can be used to help activities and skills
"""
type ArtifactContract implements BaseModel & BaseAccountModel & ContractLike & Contract & ConsumableProvider & DisableableContract {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!

  """The address of the Ethereum contract"""
  address: ContractAddress!

  """The version of the Ethereum contract"""
  version: Int!

  """
  Whether or not the Ethereum contract needs to be upgraded to get to the latest version
  """
  needsUpgrade: Boolean!

  """
  Whether or not the account contract is a role delegate for this Ethereum contract
  """
  isAccountContractRoleDelegate: Boolean!

  """The balance of Paypr for this Ethereum contract"""
  payprBalance: Float!

  """The balance of the given consumable for this Ethereum contract"""
  consumableBalance(consumableContractId: ID!): Float!

  """
  The balances of each of the given consumables for this Ethereum contract
  """
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!

  """The owned items for this Ethereum contract"""
  ownedItems(artifactContractId: ID!): [Item!]!

  """The number of owned items for this Ethereum contract"""
  ownedItemCounts(artifactContractIds: [ID!]!): [ArtifactAmount!]!

  """The block explorer URL for the contract"""
  blockExplorerUrl: String

  """The type of the contract"""
  contractType: ContractType!

  """Whether or not the contract is discoverable"""
  discoverable: Boolean!

  """The name of the contract"""
  name: String!

  """The description of the contract"""
  description: String!

  """The uri of the contract that can be used for additional information"""
  uri: String!

  """The account name of the contract"""
  account: String!

  """The consumables that are provided by this consumable provider"""
  providedConsumables: [ConsumableAmountAndBalance!]!

  """
  Base URI for items. When combined with the item ID, this can provide additional details about a particular item
  """
  baseUri: String!

  """The ERC721 token symbol"""
  symbol: String!

  """How many uses each item gets when it is created"""
  initialUses: Int!

  """
  The amount and available balance of each consumable needed by the artifact to mint each item
  """
  consumableAmountsNeededToMintItem: [ConsumableAmountAndBalance!]!

  """The total number of items in circulation"""
  totalItems: Int!

  """The total number of uses left for all items in circulation"""
  totalUsesLeft: Int!

  """The details for an item"""
  item(itemId: String!): Item

  """The details for multiple items"""
  items(itemIds: [String!]!): [Item!]!

  """The owned items for the account"""
  accountItems: [Item!]!

  """The owned items for the given player"""
  playerItems(playerId: ID!): [Item!]!

  """The number of owned items for the given player"""
  playerItemCounts(playerIds: [ID!]!): [PlayerAmount!]!

  """The block explorer URL for the token"""
  blockExplorerTokenUrl: String

  """
  Whether or not the Ethereum contract is disabled. When disabled, the contract will not allow transactions
  """
  disabled: Boolean!
}

"""Base interface for all model objects associated with an account"""
interface BaseAccountModel {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!
}

"""Base interface for all model objects"""
interface BaseModel {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!
}

type BasicGasAndPayprEstimate implements GasEstimateCore & GasEstimate & GasAndTransactionEstimate & GasAndPayprEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!

  """The amount of Paypr needed to complete the transaction"""
  payprAmount: Float!

  """The current amount of Paypr in the account"""
  payprBalance: Float!
}

type BasicGasAndTransactionEstimate implements GasEstimateCore & GasEstimate & GasAndTransactionEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!
}

type BasicSubmissionResponse implements SubmissionResponse {
  """The submission that was started as part of the mutation"""
  submission: Submission!
}

"""Represents a consumable and an associated amount"""
type ConsumableAmount {
  """The consumable contract"""
  consumable: ConsumableContract!

  """The amount associated with the consumable"""
  amount: Float!
}

"""Represents a Consumable amount along with the balance for the object"""
type ConsumableAmountAndBalance {
  """The consumable contract"""
  consumable: ConsumableContract!

  """The amount associated with the consumable"""
  amount: Float!

  """The amount of consumable owned or available by the object"""
  balance: Float!
}

input ConsumableAmountInput {
  consumableContractId: ID!
  amount: Float!
}

"""
Represents a contract that consumes consumables when specific actions are executed
"""
interface ConsumableConsumer {
  """The consumables that are required by this consumable consumer"""
  requiredConsumables: [ConsumableAmountAndBalance!]!
}

"""
Contract (ERC20) that represents tokens that can be held, used, transferred, etc.
"""
type ConsumableContract implements BaseModel & BaseAccountModel & ContractLike & Contract & DisableableContract {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!

  """The address of the Ethereum contract"""
  address: ContractAddress!

  """The version of the Ethereum contract"""
  version: Int!

  """
  Whether or not the Ethereum contract needs to be upgraded to get to the latest version
  """
  needsUpgrade: Boolean!

  """
  Whether or not the account contract is a role delegate for this Ethereum contract
  """
  isAccountContractRoleDelegate: Boolean!

  """The balance of Paypr for this Ethereum contract"""
  payprBalance: Float!

  """The balance of the given consumable for this Ethereum contract"""
  consumableBalance(consumableContractId: ID!): Float!

  """
  The balances of each of the given consumables for this Ethereum contract
  """
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!

  """The owned items for this Ethereum contract"""
  ownedItems(artifactContractId: ID!): [Item!]!

  """The number of owned items for this Ethereum contract"""
  ownedItemCounts(artifactContractIds: [ID!]!): [ArtifactAmount!]!

  """The block explorer URL for the contract"""
  blockExplorerUrl: String

  """The type of the contract"""
  contractType: ContractType!

  """Whether or not the contract is discoverable"""
  discoverable: Boolean!

  """The name of the contract"""
  name: String!

  """The description of the contract"""
  description: String!

  """The uri of the contract that can be used for additional information"""
  uri: String!

  """The account name of the contract"""
  account: String!

  """The ERC20 token symbol"""
  symbol: String!

  """
  Whether the exchange rates are different, meaning that it costs more to
  purchase each consumable than it can be exchanged for
  """
  asymmetricalExchangeRate: Boolean!

  """How much of this consumable does 1 Paypr exchange into"""
  purchasePriceExchangeRate: Int!

  """How much of this consumable is needed to exchange for 1 Paypr"""
  intrinsicValueExchangeRate: Int!

  """The total amount of this consumable in circulation"""
  totalSupply: Float!

  """The amount of Paypr available to transfer out"""
  availablePayprBalance: Float!

  """The amount of this consumable is owned by the account"""
  accountBalance: Float!

  """The amount of of this consumable owned by the given player"""
  playerBalance(playerId: ID!): Float!

  """The amount of this consumable owned by the given players"""
  playerBalances(playerIds: [ID!]!): [PlayerAmount!]!

  """The block explorer URL for the token"""
  blockExplorerTokenUrl: String

  """
  Whether or not the Ethereum contract is disabled. When disabled, the contract will not allow transactions
  """
  disabled: Boolean!
}

"""
Represents a contract that provides consumables when specific actions are executed
"""
interface ConsumableProvider {
  """The consumables that are provided by this consumable provider"""
  providedConsumables: [ConsumableAmountAndBalance!]!
}

"""The base contract interface"""
interface Contract {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!

  """The address of the Ethereum contract"""
  address: ContractAddress!

  """The version of the Ethereum contract"""
  version: Int!

  """
  Whether or not the Ethereum contract needs to be upgraded to get to the latest version
  """
  needsUpgrade: Boolean!

  """
  Whether or not the account contract is a role delegate for this Ethereum contract
  """
  isAccountContractRoleDelegate: Boolean!

  """The balance of Paypr for this Ethereum contract"""
  payprBalance: Float!

  """The balance of the given consumable for this Ethereum contract"""
  consumableBalance(consumableContractId: ID!): Float!

  """
  The balances of each of the given consumables for this Ethereum contract
  """
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!

  """The owned items for this Ethereum contract"""
  ownedItems(artifactContractId: ID!): [Item!]!

  """The number of owned items for this Ethereum contract"""
  ownedItemCounts(artifactContractIds: [ID!]!): [ArtifactAmount!]!

  """The block explorer URL for the contract"""
  blockExplorerUrl: String

  """The type of the contract"""
  contractType: ContractType!

  """Whether or not the contract is discoverable"""
  discoverable: Boolean!

  """The name of the contract"""
  name: String!

  """The description of the contract"""
  description: String!

  """The uri of the contract that can be used for additional information"""
  uri: String!

  """The account name of the contract"""
  account: String!
}

scalar ContractAddress

"""Contains a list of items of a particular type"""
type ContractConnection {
  """The page information"""
  pageInfo: PageInfo!

  """The list of edges"""
  edges: [ContractEdge!]!

  """The total number of items"""
  total: Int!
}

"""A single edge of a connection, containing the item and its cursor"""
type ContractEdge {
  """The item in the list"""
  node: Contract!

  """The cursor at this item, for use in pagination"""
  cursor: String!
}

"""Basic contract info"""
input ContractInfoInput {
  """The name of the contract"""
  name: String!

  """The description of the contract"""
  description: String
}

"""Items that represent Ethereum contracts"""
interface ContractLike {
  """The address of the Ethereum contract"""
  address: ContractAddress!

  """The version of the Ethereum contract"""
  version: Int!

  """
  Whether or not the Ethereum contract needs to be upgraded to get to the latest version
  """
  needsUpgrade: Boolean!

  """
  Whether or not the account contract is a role delegate for this Ethereum contract
  """
  isAccountContractRoleDelegate: Boolean!

  """The balance of Paypr for this Ethereum contract"""
  payprBalance: Float!

  """The balance of the given consumable for this Ethereum contract"""
  consumableBalance(consumableContractId: ID!): Float!

  """
  The balances of each of the given consumables for this Ethereum contract
  """
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!

  """The owned items for this Ethereum contract"""
  ownedItems(artifactContractId: ID!): [Item!]!

  """The number of owned items for this Ethereum contract"""
  ownedItemCounts(artifactContractIds: [ID!]!): [ArtifactAmount!]!

  """The block explorer URL for the contract"""
  blockExplorerUrl: String
}

enum ContractType {
  """Activity contract"""
  Activity

  """Artifact contract"""
  Artifact

  """Consumable contract"""
  Consumable

  """Skill contract"""
  Skill

  """Skill-constrained Activity contract"""
  SkillConstrainedActivity
}

input CreateActivityInput {
  info: ContractInfoInput!
  requiredSkills: [SkillLevelInput!]
  requiredConsumables: [ConsumableAmountInput!]!
  providedConsumables: [ConsumableAmountInput!]!
  discoverable: Boolean
}

type CreateApiKeyResponse {
  apiKey: ApiKey!
  secretKey: String!
}

input CreateArtifactInput {
  info: ContractInfoInput!
  symbol: String
  providedConsumables: [ConsumableAmountInput!]!
  initialUses: Int
  discoverable: Boolean
}

"""Input data used when creating a consumable"""
input CreateConsumableInput {
  """Basic contract info"""
  info: ContractInfoInput!

  """
  The ERC-20 token ticker symbol. When set, must be 8 characters or less and all uppercase
  """
  symbol: String

  """The exchange rate for the purchase price of the consumable"""
  purchasePriceExchangeRate: Int!

  """The exchange rate for the intrinsic value of the consumable"""
  intrinsicValueExchangeRate: Int

  """Whether or not the consumable should be discoverable by other accounts"""
  discoverable: Boolean
}

"""
The estimate of the amount of gas needed and its cost for the transaction to
create a contract, along with the gas needed for a typical transaction of the
contract and the transaction request
"""
type CreateContractGasEstimate implements GasEstimateCore & GasEstimate & GasAndTransactionEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!
  typicalTransaction: TransactionGasCost
}

input CreateSkillInput {
  info: ContractInfoInput!
  requiredSkills: [SkillLevelInput!]
  requiredConsumables: [ConsumableAmountInput!]!
  discoverable: Boolean
}

type DeleteApiKeyResponse {
  status: DeleteApiKeyStatus
}

enum DeleteApiKeyStatus {
  """API key successfully deleted"""
  Success

  """API key not found"""
  InvalidApiKey
}

"""Represents Ethereum contracts that can be disabled"""
interface DisableableContract {
  """
  Whether or not the Ethereum contract is disabled. When disabled, the contract will not allow transactions
  """
  disabled: Boolean!
}

type Estimates {
  createAccountContract: BasicGasAndTransactionEstimate!
  purchasePaypr(amount: Float!): PurchasePayprEstimate!
  addAccountContractToContract(contractId: ID!): BasicGasAndTransactionEstimate!
  createActivity(input: CreateActivityInput!): CreateContractGasEstimate!
  createArtifact(input: CreateArtifactInput!): CreateContractGasEstimate!
  createConsumable(input: CreateConsumableInput!): CreateContractGasEstimate!
  createSkill(input: CreateSkillInput!): CreateContractGasEstimate!
  disableContract(contractId: ID!): BasicGasAndTransactionEstimate!
  enableContract(contractId: ID!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars and Paypr to mint a specific amount of consumable for a contract
  """
  mintConsumableForContract(contractId: ID!, consumableContractId: ID!, amount: Float!): BasicGasAndPayprEstimate!

  """
  Estimates the cost in dollars to transfer a specific amount of consumable from a contract to your account
  """
  transferConsumableFromContract(contractId: ID!, consumableContractId: ID!, amount: Float!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars and Paypr to transfer a specific amount of consumable from your account to a contract
  """
  transferConsumableToContract(contractId: ID!, consumableContractId: ID!, amount: Float!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars to transfer a specific item from a contract to your account
  """
  transferItemFromContract(contractId: ID!, artifactContractId: ID!, itemId: String!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars and Paypr to transfer a specific item from your account to a contract
  """
  transferItemToContract(contractId: ID!, artifactContractId: ID!, itemId: String!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars to transfer a specific amount of Paypr from a contract to your account
  """
  transferPayprFromContract(contractId: ID!, amount: Float!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars to transfer a specific amount of consumable from your account to a contract
  """
  transferPayprToContract(contractId: ID!, amount: Float!): BasicGasAndTransactionEstimate!
  upgradeContract(contractId: ID!): BasicGasAndTransactionEstimate!
  createPlayer: BasicGasAndTransactionEstimate!
  acquireNextSkillLevelForPlayer(playerId: ID!, skillContractId: ID!, itemsToUse: [ItemInput!]): AcquireNextSkillLevelForPlayerEstimate!
  addAccountContractToPlayer(playerId: ID!): BasicGasAndTransactionEstimate!
  disablePlayer(playerId: ID!): BasicGasAndTransactionEstimate!
  enablePlayer(playerId: ID!): BasicGasAndTransactionEstimate!
  executeActivityForPlayer(playerId: ID!, activityContractId: ID!, itemsToUse: [ItemInput!]): ExecuteActivityForPlayerEstimate!

  """
  Estimates the cost in dollars and Paypr to mint a specific amount of consumable for a player
  """
  mintConsumableForPlayer(playerId: ID!, consumableContractId: ID!, amount: Float!): BasicGasAndPayprEstimate!

  """Estimates the cost in dollars to mint an item for a player"""
  mintItemForPlayer(playerId: ID!, artifactContractId: ID!): MintItemForPlayerEstimate!

  """
  Estimates the cost in dollars to transfer a specific amount of consumable from a player to your account
  """
  transferConsumableFromPlayer(playerId: ID!, consumableContractId: ID!, amount: Float!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars and Paypr to transfer a specific amount of consumable from your account to a player
  """
  transferConsumableToPlayer(playerId: ID!, consumableContractId: ID!, amount: Float!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars to transfer a specific item from a player to your account
  """
  transferItemFromPlayer(playerId: ID!, artifactContractId: ID!, itemId: String!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars to transfer a specific item from your account to a player
  """
  transferItemToPlayer(playerId: ID!, artifactContractId: ID!, itemId: String!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars to transfer a specific amount of Paypr from a player to your account
  """
  transferPayprFromPlayer(playerId: ID!, amount: Float!): BasicGasAndTransactionEstimate!

  """
  Estimates the cost in dollars to transfer a specific amount of Paypr from your account to a player
  """
  transferPayprToPlayer(playerId: ID!, amount: Float!): BasicGasAndTransactionEstimate!
  upgradePlayer(playerId: ID!): BasicGasAndTransactionEstimate!
}

type ExecuteActivityForPlayerEstimate implements GasEstimateCore & GasEstimate & GasAndTransactionEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!

  """
  Consumables that must be provided by the player to complete the activity, along with the player's balance for each
  """
  consumableAmountsNeeded: [ConsumableAmountAndBalance!]!

  """
  Consumable amounts that will be given to the player when the activity is completed
  """
  consumableAmountsProvided: [ConsumableAmount!]!
}

"""A gas estimate that also estimates the amount of Paypr needed"""
interface GasAndPayprEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!

  """The amount of Paypr needed to complete the transaction"""
  payprAmount: Float!

  """The current amount of Paypr in the account"""
  payprBalance: Float!
}

"""
The estimate of the amount of gas needed and its cost for the transaction, the
current account balance and any prepay charge, plus the transaction request that
can be used to execute the transaction
"""
interface GasAndTransactionEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!
}

"""
The estimate of the amount of gas needed and its cost for the transaction, plus
the current account balance and any prepay charge
"""
interface GasEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

"""
The estimate of the amount of gas needed and its cost for the transaction
"""
interface GasEstimateCore {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!
}

scalar ISODateTime

"""Represents an individual item of an artifact contract"""
type Item {
  """The unique ID of the item"""
  itemId: String!

  """The number of uses the item has left"""
  usesLeft: Int!

  """The owner of the item, if any"""
  owner: ContractLike

  """Whether or not the item is owned by the account"""
  ownedByAccount: Boolean!

  """The block explorer URL for the item"""
  blockExplorerUrl: String
}

input ItemInput {
  artifactContractId: ID!
  itemId: String!
}

type MintItemForPlayerEstimate implements GasEstimateCore & GasEstimate & GasAndTransactionEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!

  """
  The amount and available balance of each consumable needed by the artifact to mint the item
  """
  consumableAmountsNeeded: [ConsumableAmountAndBalance!]!
}

type Mutation {
  updateAccount(name: String!): UpdateAccountResponse!
  prepareBillingUpdate: PrepareBillingResponse
  updateAccountBilling(input: UpdateAccountBillingInput!): UpdateAccountBillingResponse!
  createApiKey: CreateApiKeyResponse!
  deleteApiKey(apiKeyId: ID!): DeleteApiKeyResponse!
  createPlayer(name: String!, transactionRequest: TransactionRequestInput, signedTransaction: String): BasicSubmissionResponse!
  executeTransaction(transactionRequest: TransactionRequestInput, signedTransaction: String): BasicSubmissionResponse!
  publishContract(id: ID!): PublishContractResponse!
  purchasePaypr(amount: Float!): BasicSubmissionResponse!
}

"""Describes the current state of pagination"""
type PageInfo {
  """The cursor used to retrieve this page, if any"""
  startCursor: String

  """The cursor to use to get the next page, if any"""
  endCursor: String

  """Whether or not there are any more pages after this one"""
  hasNextPage: Boolean!

  """Whether or not there are any more pages before this one"""
  hasPreviousPage: Boolean!
}

"""
Represents an end user, which will interact with other contracts within the system
"""
type Player implements BaseModel & BaseAccountModel & ContractLike {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!

  """The address of the Ethereum contract"""
  address: ContractAddress!

  """The version of the Ethereum contract"""
  version: Int!

  """
  Whether or not the Ethereum contract needs to be upgraded to get to the latest version
  """
  needsUpgrade: Boolean!

  """
  Whether or not the account contract is a role delegate for this Ethereum contract
  """
  isAccountContractRoleDelegate: Boolean!

  """The balance of Paypr for this Ethereum contract"""
  payprBalance: Float!

  """The balance of the given consumable for this Ethereum contract"""
  consumableBalance(consumableContractId: ID!): Float!

  """
  The balances of each of the given consumables for this Ethereum contract
  """
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!

  """The owned items for this Ethereum contract"""
  ownedItems(artifactContractId: ID!): [Item!]!

  """The number of owned items for this Ethereum contract"""
  ownedItemCounts(artifactContractIds: [ID!]!): [ArtifactAmount!]!

  """The block explorer URL for the contract"""
  blockExplorerUrl: String

  """Whether or not the player is disabled."""
  disabled: Boolean!

  """Name associated with this player."""
  name: String!

  """The skill level for the player"""
  skillLevel(skillContractId: ID!): Int!

  """Skill levels for the player for the given skills"""
  skillLevels(skillContractIds: [ID!]!): [SkillLevel!]!
}

type PlayerAmount {
  player: Player!
  amount: Float!
}

"""Contains a list of items of a particular type"""
type PlayerConnection {
  """The page information"""
  pageInfo: PageInfo!

  """The list of edges"""
  edges: [PlayerEdge!]!

  """The total number of items"""
  total: Int!
}

"""A single edge of a connection, containing the item and its cursor"""
type PlayerEdge {
  """The item in the list"""
  node: Player!

  """The cursor at this item, for use in pagination"""
  cursor: String!
}

type PrepareBillingResponse {
  clientSecret: StripeClientSecret!
}

type PublishContractResponse {
  contract: Contract!
}

type PurchasePayprEstimate implements GasEstimateCore & GasEstimate & GasAndTransactionEstimate {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!

  """The current account balance, in USD"""
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """The transaction request data"""
  transactionRequest: TransactionRequest!

  """The cost of the Paypr, in USD"""
  payprCost: Float!

  """The total cost, including gas and Paypr costs, in USD"""
  totalCost: Float!
}

type Query {
  account: Account!
  contracts(contractType: ContractType, contractTypes: [ContractType!], onlyEnabled: Boolean, showOthers: Boolean): ContractConnection!
  contract(id: ID!): Contract
  submission(id: ID!): Submission
  player(id: ID!): Player
  transaction(id: ID!): Transaction
  estimates: Estimates!
}

interface SkillConstrained {
  requiredSkills: [SkillLevel!]!
}

type SkillContract implements BaseModel & BaseAccountModel & ContractLike & Contract & ConsumableConsumer & DisableableContract & SkillConstrained {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!

  """The address of the Ethereum contract"""
  address: ContractAddress!

  """The version of the Ethereum contract"""
  version: Int!

  """
  Whether or not the Ethereum contract needs to be upgraded to get to the latest version
  """
  needsUpgrade: Boolean!

  """
  Whether or not the account contract is a role delegate for this Ethereum contract
  """
  isAccountContractRoleDelegate: Boolean!

  """The balance of Paypr for this Ethereum contract"""
  payprBalance: Float!

  """The balance of the given consumable for this Ethereum contract"""
  consumableBalance(consumableContractId: ID!): Float!

  """
  The balances of each of the given consumables for this Ethereum contract
  """
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!

  """The owned items for this Ethereum contract"""
  ownedItems(artifactContractId: ID!): [Item!]!

  """The number of owned items for this Ethereum contract"""
  ownedItemCounts(artifactContractIds: [ID!]!): [ArtifactAmount!]!

  """The block explorer URL for the contract"""
  blockExplorerUrl: String

  """The type of the contract"""
  contractType: ContractType!

  """Whether or not the contract is discoverable"""
  discoverable: Boolean!

  """The name of the contract"""
  name: String!

  """The description of the contract"""
  description: String!

  """The uri of the contract that can be used for additional information"""
  uri: String!

  """The account name of the contract"""
  account: String!

  """The consumables that are required by this consumable consumer"""
  requiredConsumables: [ConsumableAmountAndBalance!]!
  requiredSkills: [SkillLevel!]!

  """
  Whether or not the Ethereum contract is disabled. When disabled, the contract will not allow transactions
  """
  disabled: Boolean!
}

"""Represents a skill and an associated level"""
type SkillLevel {
  """The skill contract"""
  skill: SkillContract!

  """The skill level associated with the skill"""
  level: Int!
}

input SkillLevelInput {
  skillContractId: ID!
  level: Int!
}

scalar StripeClientSecret

scalar StripePaymentMethod

"""Represents a submission to execute a contract or other transaction"""
type Submission implements BaseModel & BaseAccountModel {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!

  """The type of submission"""
  submissionType: String!

  """The current status of the submission"""
  currentStatus: SubmissionStatus!

  """Details of the error when the submission has Failed"""
  errorDetails: String

  """An estimate of how long the submission will take, in seconds"""
  estimateInSeconds: Int

  """Whether or not the submission is still in progress"""
  inProgress: Boolean!

  """
  Whether or not the submission is done. Can be done if completed or failed.
  """
  done: Boolean!

  """A contract associated with the submission, if any"""
  contract: Contract

  """A player associated with the submission, if any"""
  player: Player

  """An item associated with the submission, if any"""
  item: Item

  """The Ethereum transaction hash for this submission, if available"""
  transactionHash: String

  """The block explorer URL for the transaction"""
  blockExplorerUrl: String
}

"""Contains a list of items of a particular type"""
type SubmissionConnection {
  """The page information"""
  pageInfo: PageInfo!

  """The list of edges"""
  edges: [SubmissionEdge!]!

  """The total number of items"""
  total: Int!
}

"""A single edge of a connection, containing the item and its cursor"""
type SubmissionEdge {
  """The item in the list"""
  node: Submission!

  """The cursor at this item, for use in pagination"""
  cursor: String!
}

"""A response from a mutation that starts a submission"""
interface SubmissionResponse {
  """The submission that was started as part of the mutation"""
  submission: Submission!
}

enum SubmissionStatus {
  """Submission has been created"""
  Created

  """Submission has been submitted"""
  Submitted

  """Submission is being worked on"""
  Processing

  """Submission has been completed"""
  Completed

  """Submission failed. See errorDetails for details."""
  Failed
}

type Transaction implements BaseModel & BaseAccountModel {
  """The ID of the object"""
  id: ID!

  """When the object was created"""
  createdAt: ISODateTime!

  """When the object was last updated"""
  updatedAt: ISODateTime!
  transactionType: TransactionType!
  amount: Float!
  accountBalance: Float!
  gasAmount: Float
  submission: Submission
  contract: Contract
}

"""Contains a list of items of a particular type"""
type TransactionConnection {
  """The page information"""
  pageInfo: PageInfo!

  """The list of edges"""
  edges: [TransactionEdge!]!

  """The total number of items"""
  total: Int!
}

"""A single edge of a connection, containing the item and its cursor"""
type TransactionEdge {
  """The item in the list"""
  node: Transaction!

  """The cursor at this item, for use in pagination"""
  cursor: String!
}

"""Details for the transaction"""
type TransactionGasCost implements GasEstimateCore {
  """The amount of gas it will take to execute the Ethereum transaction"""
  gasAmount: Int!

  """The cost of the gas to execute the Ethereum transaction"""
  gasCost: Float!
}

type TransactionRequest {
  to: String
  data: String!
}

input TransactionRequestInput {
  to: String
  data: String!
}

enum TransactionType {
  """Prepayment balance increase"""
  Prepayment

  """Represents a purchase"""
  Purchase

  """Create a new contract"""
  CreateContract

  """Execute a contract"""
  ExecuteContract

  """Update a contract"""
  UpdateContract
}

input UpdateAccountBillingInput {
  stripePaymentMethod: StripePaymentMethod!
}

type UpdateAccountBillingResponse {
  account: Account!
}

type UpdateAccountResponse {
  account: Account!
}

