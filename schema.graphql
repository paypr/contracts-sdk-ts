"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behaviour of this scalar.
  """
  url: String!
) on SCALAR

type Account implements BaseModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  name: String!
  nickname: String!
  hasPaymentInfo: Boolean!
  balance: Float!
  payprBalance: Float!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  apiKeys: ApiKeyConnection!
  contracts(contractType: ContractType, contractTypes: [ContractType!]): ContractConnection!
  submissions(currentStatus: SubmissionStatus, onlyInProgress: Boolean): SubmissionConnection!
  players: PlayerConnection!
  transactions: TransactionConnection!
}

type AcquireNextSkillLevelForPlayerEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """
  Consumables that must be provided by the player to acquire the skill, along with the player's balance for each
  """
  consumableAmountsNeeded: [ConsumableAmountAndBalance!]!
}

type AcquireNextSkillLevelForPlayerResponse implements SubmissionResponse {
  submission: Submission!
}

type ActivityContract implements BaseModel & BaseAccountModel & ContractLike & Contract & ConsumableConsumer & ConsumableProvider & DisableableContract & SkillConstrained {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  address: ContractAddress!
  version: Int!
  needsUpgrade: Boolean!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  contractType: ContractType!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
  requiredConsumables: [ConsumableAmountAndBalance!]!
  providedConsumables: [ConsumableAmountAndBalance!]!
  requiredSkills: [SkillLevel!]!
  disabled: Boolean!
}

type ApiKey implements BaseModel & BaseAccountModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  lastUsedAt: ISODateTime
}

"""
Contains a list of items of a particular type
"""
type ApiKeyConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [ApiKeyEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type ApiKeyEdge {
  """
  The item in the list
  """
  node: ApiKey!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

type ArtifactContract implements BaseModel & BaseAccountModel & ContractLike & Contract & ConsumableProvider & DisableableContract {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  address: ContractAddress!
  version: Int!
  needsUpgrade: Boolean!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  contractType: ContractType!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
  providedConsumables: [ConsumableAmountAndBalance!]!
  baseUri: String!
  symbol: String!
  initialUses: Int!
  disabled: Boolean!
}

interface BaseAccountModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
}

interface BaseModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
}

type ConsumableAmount {
  consumable: ConsumableContract!
  amount: Float!
}

type ConsumableAmountAndBalance {
  consumable: ConsumableContract!
  amount: Float!
  balance: Float!
}

input ConsumableAmountInput {
  consumableContractId: ID!
  amount: Float!
}

interface ConsumableConsumer {
  requiredConsumables: [ConsumableAmountAndBalance!]!
}

type ConsumableContract implements BaseModel & BaseAccountModel & ContractLike & Contract & DisableableContract {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  address: ContractAddress!
  version: Int!
  needsUpgrade: Boolean!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  contractType: ContractType!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
  symbol: String!
  exchangeRate: Int!
  totalSupply: Float!
  accountBalance: Float!
  playerBalance(playerId: ID!): Float!
  playerBalances(playerIds: [ID!]!): [PlayerAmount!]!
  disabled: Boolean!
}

interface ConsumableProvider {
  providedConsumables: [ConsumableAmountAndBalance!]!
}

interface Contract {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  address: ContractAddress!
  version: Int!
  needsUpgrade: Boolean!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  contractType: ContractType!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
}

scalar ContractAddress

"""
Contains a list of items of a particular type
"""
type ContractConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [ContractEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type ContractEdge {
  """
  The item in the list
  """
  node: Contract!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

input ContractInfoInput {
  name: String!
  description: String
}

interface ContractLike {
  address: ContractAddress!
  version: Int!
  needsUpgrade: Boolean!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
}

enum ContractType {
  """
  Activity contract
  """
  Activity

  """
  Artifact contract
  """
  Artifact

  """
  Consumable contract
  """
  Consumable

  """
  Skill contract
  """
  Skill

  """
  Skill-constrained Activity contract
  """
  SkillConstrainedActivity
}

type CreateActivityEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

input CreateActivityInput {
  info: ContractInfoInput!
  requiredSkills: [SkillLevelInput!]
  requiredConsumables: [ConsumableAmountInput!]!
  providedConsumables: [ConsumableAmountInput!]!
  discoverable: Boolean
}

type CreateActivityResponse implements SubmissionResponse {
  submission: Submission!
}

type CreateApiKeyResponse {
  apiKey: ApiKey!
  secretKey: String!
}

type CreateArtifactEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

input CreateArtifactInput {
  info: ContractInfoInput!
  symbol: String
  providedConsumables: [ConsumableAmountInput!]!
  initialUses: Int
  discoverable: Boolean
}

type CreateArtifactResponse implements SubmissionResponse {
  submission: Submission!
}

type CreateConsumableEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

input CreateConsumableInput {
  info: ContractInfoInput!
  symbol: String
  exchangeRate: Int!
  discoverable: Boolean
}

type CreateConsumableResponse implements SubmissionResponse {
  submission: Submission!
}

type CreatePlayerEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

input CreatePlayerInput {
  name: String!
}

type CreatePlayerResponse implements SubmissionResponse {
  submission: Submission!
}

type CreateSkillEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

input CreateSkillInput {
  info: ContractInfoInput!
  requiredSkills: [SkillLevelInput!]
  requiredConsumables: [ConsumableAmountInput!]!
  discoverable: Boolean
}

type CreateSkillResponse implements SubmissionResponse {
  submission: Submission!
}

type DeleteApiKeyResponse {
  status: DeleteApiKeyStatus
}

enum DeleteApiKeyStatus {
  """
  API key successfully deleted
  """
  Success

  """
  API key not found
  """
  InvalidApiKey
}

interface DisableableContract {
  disabled: Boolean!
}

type DisableContractResponse implements SubmissionResponse {
  submission: Submission!
}

type EnableContractResponse implements SubmissionResponse {
  submission: Submission!
}

type Estimates {
  createActivity(input: CreateActivityInput!): CreateActivityEstimate!
  createArtifact(input: CreateArtifactInput!): CreateArtifactEstimate!
  createConsumable(input: CreateConsumableInput!): CreateConsumableEstimate!
  createSkill(input: CreateSkillInput!): CreateSkillEstimate!
  transferConsumableFromContract(
    contractId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableFromContractEstimate!
  transferConsumableToContract(
    contractId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableToContractEstimate!
  upgradeContract(contractId: ID!): UpgradeContractEstimate!
  purchasePaypr(amount: Float!): PurchasePayprEstimate!
  createPlayer(input: CreatePlayerInput!): CreatePlayerEstimate!
  acquireNextSkillLevelForPlayer(
    playerId: ID!
    skillContractId: ID!
    itemsToUse: [ItemInput!]
  ): AcquireNextSkillLevelForPlayerEstimate!
  executeActivityForPlayer(
    playerId: ID!
    activityContractId: ID!
    itemsToUse: [ItemInput!]
  ): ExecuteActivityForPlayerEstimate!
  transferConsumableFromPlayer(
    playerId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableFromPlayerEstimate!
  transferConsumableToPlayer(
    playerId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableToPlayerEstimate!
  upgradePlayer(playerId: ID!): UpgradePlayerEstimate!
}

type ExecuteActivityForPlayerEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """
  Consumables that must be provided by the player to complete the activity, along with the player's balance for each
  """
  consumableAmountsNeeded: [ConsumableAmountAndBalance!]!

  """
  Consumable amounts that will be given to the player when the activity is completed
  """
  consumableAmountsProvided: [ConsumableAmount!]!
}

type ExecuteActivityForPlayerResponse implements SubmissionResponse {
  submission: Submission!
}

interface GasAndPayprEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """
  The amount of Paypr needed to complete the transaction
  """
  payprAmount: Float!

  """
  The current amount of Paypr in the account
  """
  payprBalance: Float!
}

interface GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

scalar ISODateTime

input ItemInput {
  artifactContractId: ID!
  itemId: String!
}

type Mutation {
  updateAccount(name: String!): UpdateAccountResponse!
  prepareBillingUpdate: PrepareBillingResponse
  updateAccountBilling(input: UpdateAccountBillingInput!): UpdateAccountBillingResponse!
  createApiKey: CreateApiKeyResponse!
  deleteApiKey(apiKeyId: ID!): DeleteApiKeyResponse!
  createActivity(input: CreateActivityInput!): CreateActivityResponse!
  createArtifact(input: CreateArtifactInput!): CreateArtifactResponse!
  createConsumable(input: CreateConsumableInput!): CreateConsumableResponse!
  createSkill(input: CreateSkillInput!): CreateSkillResponse!
  disableContract(id: ID!): DisableContractResponse!
  enableContract(id: ID!): EnableContractResponse!
  publishContract(id: ID!): PublishContractResponse!
  transferConsumableFromContract(
    contractId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableFromContractResponse!
  transferConsumableToContract(
    contractId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableToContractResponse!
  upgradeContract(contractId: ID!): UpgradeContractResponse!
  purchasePaypr(amount: Float!): PurchasePayprResponse!
  createPlayer(input: CreatePlayerInput!): CreatePlayerResponse!
  acquireNextSkillLevelForPlayer(
    playerId: ID!
    skillContractId: ID!
    itemsToUse: [ItemInput!]
    amountsToProvide: [ConsumableAmountInput!]!
  ): AcquireNextSkillLevelForPlayerResponse!
  executeActivityForPlayer(
    playerId: ID!
    activityContractId: ID!
    itemsToUse: [ItemInput!]
    amountsToProvide: [ConsumableAmountInput!]!
    amountsToConsume: [ConsumableAmountInput!]
  ): ExecuteActivityForPlayerResponse!
  transferConsumableFromPlayer(
    playerId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableFromPlayerResponse!
  transferConsumableToPlayer(
    playerId: ID!
    consumableContractId: ID!
    amount: Float!
  ): TransferConsumableToPlayerResponse!
  upgradePlayer(playerId: ID!): UpgradePlayerResponse!
}

"""
Describes the current state of pagination
"""
type PageInfo {
  """
  The cursor used to retrieve this page, if any
  """
  startCursor: String

  """
  The cursor to use to get the next page, if any
  """
  endCursor: String

  """
  Whether or not there are any more pages after this one
  """
  hasNextPage: Boolean!

  """
  Whether or not there are any more pages before this one
  """
  hasPreviousPage: Boolean!
}

type Player implements BaseModel & BaseAccountModel & ContractLike {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  address: ContractAddress!
  version: Int!
  needsUpgrade: Boolean!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  name: String!
  skillLevel(skillContractId: ID!): Int!
  skillLevels(skillContractIds: [ID!]!): [SkillLevel!]!
}

type PlayerAmount {
  player: Player!
  amount: Float!
}

"""
Contains a list of items of a particular type
"""
type PlayerConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [PlayerEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type PlayerEdge {
  """
  The item in the list
  """
  node: Player!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

type PrepareBillingResponse {
  clientSecret: StripeClientSecret!
}

type PublishContractResponse {
  contract: Contract!
}

type PurchasePayprEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """
  The cost of the Paypr, in USD
  """
  payprCost: Float!

  """
  The total cost, including gas and Paypr costs, in USD
  """
  totalCost: Float!
}

type PurchasePayprResponse implements SubmissionResponse {
  submission: Submission!
}

type Query {
  account: Account!
  contracts(
    contractType: ContractType
    contractTypes: [ContractType!]
    onlyEnabled: Boolean
    showOthers: Boolean
  ): ContractConnection!
  contract(id: ID!): Contract
  submission(id: ID!): Submission
  player(id: ID!): Player
  transaction(id: ID!): Transaction
  estimates: Estimates!
}

interface SkillConstrained {
  requiredSkills: [SkillLevel!]!
}

type SkillContract implements BaseModel & BaseAccountModel & ContractLike & Contract & ConsumableConsumer & DisableableContract & SkillConstrained {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  address: ContractAddress!
  version: Int!
  needsUpgrade: Boolean!
  consumableBalance(consumableContractId: ID!): Float!
  consumableBalances(consumableContractIds: [ID!]!): [ConsumableAmount!]!
  contractType: ContractType!
  discoverable: Boolean!
  name: String!
  description: String!
  uri: String!
  account: String!
  requiredConsumables: [ConsumableAmountAndBalance!]!
  requiredSkills: [SkillLevel!]!
  disabled: Boolean!
}

type SkillLevel {
  skill: SkillContract!
  level: Int!
}

input SkillLevelInput {
  skillContractId: ID!
  level: Int!
}

scalar StripeClientSecret

scalar StripePaymentMethod

type Submission implements BaseModel & BaseAccountModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  submissionType: String!
  currentStatus: SubmissionStatus!
  errorDetails: String
  estimateInSeconds: Int
  inProgress: Boolean!
  done: Boolean!
  contract: Contract
  player: Player
  transactionHash: String
}

"""
Contains a list of items of a particular type
"""
type SubmissionConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [SubmissionEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type SubmissionEdge {
  """
  The item in the list
  """
  node: Submission!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

interface SubmissionResponse {
  submission: Submission!
}

enum SubmissionStatus {
  """
  Submission has been created
  """
  Created

  """
  Submission has been submitted
  """
  Submitted

  """
  Submission is being worked on
  """
  Processing

  """
  Submission has been completed
  """
  Completed

  """
  Submission failed. See errorDetails for details.
  """
  Failed
}

type Transaction implements BaseModel & BaseAccountModel {
  id: ID!
  createdAt: ISODateTime!
  updatedAt: ISODateTime!
  transactionType: TransactionType!
  amount: Float!
  accountBalance: Float!
  gasAmount: Float
  submission: Submission
  contract: Contract
}

"""
Contains a list of items of a particular type
"""
type TransactionConnection {
  """
  The page information
  """
  pageInfo: PageInfo!

  """
  The list of edges
  """
  edges: [TransactionEdge!]!

  """
  The total number of items
  """
  total: Int!
}

"""
A single edge of a connection, containing the item and its cursor
"""
type TransactionEdge {
  """
  The item in the list
  """
  node: Transaction!

  """
  The cursor at this item, for use in pagination
  """
  cursor: String!
}

enum TransactionType {
  """
  Prepayment balance increase
  """
  Prepayment

  """
  Represents a purchase
  """
  Purchase

  """
  Create a new contract
  """
  CreateContract

  """
  Execute a contract
  """
  ExecuteContract

  """
  Update a contract
  """
  UpdateContract
}

type TransferConsumableFromContractEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """
  The contract's current balance of this consumable
  """
  consumableBalance: Float!
}

type TransferConsumableFromContractResponse implements SubmissionResponse {
  submission: Submission!
}

type TransferConsumableFromPlayerEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """
  The player's current balance of this consumable
  """
  consumableBalance: Float!
}

type TransferConsumableFromPlayerResponse implements SubmissionResponse {
  submission: Submission!
}

type TransferConsumableToContractEstimate implements GasEstimate & GasAndPayprEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """
  The amount of Paypr needed to complete the transaction
  """
  payprAmount: Float!

  """
  The current amount of Paypr in the account
  """
  payprBalance: Float!

  """
  The account's current balance of this consumable
  """
  consumableBalance: Float!
}

type TransferConsumableToContractResponse implements SubmissionResponse {
  submission: Submission!
}

type TransferConsumableToPlayerEstimate implements GasEstimate & GasAndPayprEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float

  """
  The amount of Paypr needed to complete the transaction
  """
  payprAmount: Float!

  """
  The current amount of Paypr in the account
  """
  payprBalance: Float!

  """
  The account's current balance of this consumable
  """
  consumableBalance: Float!
}

type TransferConsumableToPlayerResponse implements SubmissionResponse {
  submission: Submission!
}

input UpdateAccountBillingInput {
  stripePaymentMethod: StripePaymentMethod!
}

type UpdateAccountBillingResponse {
  account: Account!
}

type UpdateAccountResponse {
  account: Account!
}

type UpgradeContractEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

type UpgradeContractResponse implements SubmissionResponse {
  submission: Submission!
}

type UpgradePlayerEstimate implements GasEstimate {
  """
  The amount of gas it will take to execute the Ethereum transaction
  """
  gasAmount: Int!

  """
  The cost of the gas to execute the Ethereum transaction
  """
  gasCost: Float!

  """
  The current account balance, in USD
  """
  balance: Float!

  """
  The estimated amount that will be charged to the credit card on file to complete the transaction, in USD
  """
  prepayCharge: Float
}

type UpgradePlayerResponse implements SubmissionResponse {
  submission: Submission!
}
